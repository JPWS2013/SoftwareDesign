"""This module contains code from
Think Python by Allen B. Downey
http://thinkpython.com

Copyright 2012 Allen B. Downey
License: GNU GPLv3 http://www.gnu.org/licenses/gpl.html

"""

#from rotate import rotate_word

def rotate_word(s, order):
    """
    Takes a string and a rotation number and rotates the string by the given amount

    More information about this function:

    s: Needs to be a string
    order: Needs to be an integer

    Returns the rotated string

    """
    
    newString=''

    for eachChar in s:

        if eachChar.isupper():
            start_code=ord('A')
        elif eachChar.islower():
            start_code=ord('a')
        else:
            newString=newString+eachChar
            continue
        
        total_letters = 26

        startIndex = ord(eachChar)
        endIndex = ((startIndex - start_code + order) % total_letters) + start_code
        newString = newString + chr(endIndex)

    return newString

def make_word_dict():
    """Read the words in words.txt and return a dictionary
    that contains the words as keys"""
    d = dict()
    fin = open('words.txt')
    for line in fin:
        word = line.strip().lower()
        d[word] = word

    return d


def rotate_pairs(word, word_dict):
    """Prints all words that can be generated by rotating word.

    word: string
    word_dict: dictionary with words as keys
    """
    testlist=[]

    for i in range(1, 14):
        rotated = rotate_word(word, i)
        if rotated in word_dict:
            #print word, i, rotated
            testlist.append(rotated)

    return testlist


if __name__ == '__main__':
    word_dict = make_word_dict()

    existinglist=[]

    for word in word_dict:
        
        testedlist=rotate_pairs(word, word_dict)
        existinglist=existinglist+testedlist

print len(existinglist)
